"use strict";

function cov_12h13mlfku() {
  var path = "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/queryModel.js";
  var hash = "a3e1a4c72243f32e8cbb7ad4b641960c0bb5bfaa";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/queryModel.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 3,
          column: 15
        },
        end: {
          line: 7,
          column: 2
        }
      },
      "2": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 48
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a3e1a4c72243f32e8cbb7ad4b641960c0bb5bfaa"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12h13mlfku = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12h13mlfku();
var mongoose = (cov_12h13mlfku().s[0]++, require("mongoose"));
var schema = (cov_12h13mlfku().s[1]++, mongoose.Schema({
  name: String,
  email: String,
  message: String
}));
cov_12h13mlfku().s[2]++;
module.exports = mongoose.model("Query", schema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTJoMTNtbGZrdSIsImFjdHVhbENvdmVyYWdlIiwibW9uZ29vc2UiLCJzIiwicmVxdWlyZSIsInNjaGVtYSIsIlNjaGVtYSIsIm5hbWUiLCJTdHJpbmciLCJlbWFpbCIsIm1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kZWwiXSwic291cmNlUm9vdCI6Ii9Vc2Vycy9uc2h1dGlwL0Rlc2t0b3AvQW5kZWxhL215LWJyYW5kLWJhY2tlbmQvc2VydmVyL21vZGVscy8iLCJzb3VyY2VzIjpbInF1ZXJ5TW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIilcblxuY29uc3Qgc2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hKHtcblx0bmFtZTogU3RyaW5nLFxuXHRlbWFpbDogU3RyaW5nLFxuICAgIG1lc3NhZ2U6IFN0cmluZyxcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2UubW9kZWwoXCJRdWVyeVwiLCBzY2hlbWEpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGNBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGNBQUE7QUFmWixJQUFNRSxRQUFRLElBQUFGLGNBQUEsR0FBQUcsQ0FBQSxPQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXBDLElBQU1DLE1BQU0sSUFBQUwsY0FBQSxHQUFBRyxDQUFBLE9BQUdELFFBQVEsQ0FBQ0ksTUFBTSxDQUFDO0VBQzlCQyxJQUFJLEVBQUVDLE1BQU07RUFDWkMsS0FBSyxFQUFFRCxNQUFNO0VBQ1ZFLE9BQU8sRUFBRUY7QUFDYixDQUFDLENBQUM7QUFBQVIsY0FBQSxHQUFBRyxDQUFBO0FBRUZRLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixRQUFRLENBQUNXLEtBQUssQ0FBQyxPQUFPLEVBQUVSLE1BQU0sQ0FBQyJ9