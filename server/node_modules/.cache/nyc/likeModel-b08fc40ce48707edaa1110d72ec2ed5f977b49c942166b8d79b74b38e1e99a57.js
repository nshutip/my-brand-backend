"use strict";

function cov_xmg2gcdwf() {
  var path = "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/likeModel.js";
  var hash = "d907602f5bab1f17277fff33c484c722b98724dc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/likeModel.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 3,
          column: 19
        },
        end: {
          line: 7,
          column: 2
        }
      },
      "2": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 51
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d907602f5bab1f17277fff33c484c722b98724dc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_xmg2gcdwf = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_xmg2gcdwf();
var mongoose = (cov_xmg2gcdwf().s[0]++, require("mongoose"));
var likeSchema = (cov_xmg2gcdwf().s[1]++, new mongoose.Schema({
  articleId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'Article'
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'User'
  },
  like: {
    type: Boolean,
    required: true
  }
}));
cov_xmg2gcdwf().s[2]++;
module.exports = mongoose.model("Like", likeSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfeG1nMmdjZHdmIiwiYWN0dWFsQ292ZXJhZ2UiLCJtb25nb29zZSIsInMiLCJyZXF1aXJlIiwibGlrZVNjaGVtYSIsIlNjaGVtYSIsImFydGljbGVJZCIsInR5cGUiLCJUeXBlcyIsIk9iamVjdElkIiwicmVxdWlyZWQiLCJyZWYiLCJ1c2VySWQiLCJsaWtlIiwiQm9vbGVhbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2RlbCJdLCJzb3VyY2VSb290IjoiL1VzZXJzL25zaHV0aXAvRGVza3RvcC9BbmRlbGEvbXktYnJhbmQtYmFja2VuZC9zZXJ2ZXIvbW9kZWxzLyIsInNvdXJjZXMiOlsibGlrZU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZShcIm1vbmdvb3NlXCIpXG5cbmNvbnN0IGxpa2VTY2hlbWEgPSBuZXcgbW9uZ29vc2UuU2NoZW1hKHtcblx0YXJ0aWNsZUlkOiB7IHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVxdWlyZWQ6IHRydWUsIHJlZjogJ0FydGljbGUnIH0sXG5cdHVzZXJJZDogeyB0eXBlOiBtb25nb29zZS5TY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlcXVpcmVkOiB0cnVlLCByZWY6ICdVc2VyJyB9LFxuICAgIGxpa2U6IHt0eXBlOiBCb29sZWFuLCByZXF1aXJlZDogdHJ1ZX0sXG59KVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vbmdvb3NlLm1vZGVsKFwiTGlrZVwiLCBsaWtlU2NoZW1hKVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWVZO0lBQUFBLGFBQUEsWUFBQUEsQ0FBQTtNQUFBLE9BQUFDLGNBQUE7SUFBQTtFQUFBO0VBQUEsT0FBQUEsY0FBQTtBQUFBO0FBQUFELGFBQUE7QUFmWixJQUFNRSxRQUFRLElBQUFGLGFBQUEsR0FBQUcsQ0FBQSxPQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0FBRXBDLElBQU1DLFVBQVUsSUFBQUwsYUFBQSxHQUFBRyxDQUFBLE9BQUcsSUFBSUQsUUFBUSxDQUFDSSxNQUFNLENBQUM7RUFDdENDLFNBQVMsRUFBRTtJQUFFQyxJQUFJLEVBQUVOLFFBQVEsQ0FBQ0ksTUFBTSxDQUFDRyxLQUFLLENBQUNDLFFBQVE7SUFBRUMsUUFBUSxFQUFFLElBQUk7SUFBRUMsR0FBRyxFQUFFO0VBQVUsQ0FBQztFQUNuRkMsTUFBTSxFQUFFO0lBQUVMLElBQUksRUFBRU4sUUFBUSxDQUFDSSxNQUFNLENBQUNHLEtBQUssQ0FBQ0MsUUFBUTtJQUFFQyxRQUFRLEVBQUUsSUFBSTtJQUFFQyxHQUFHLEVBQUU7RUFBTyxDQUFDO0VBQzFFRSxJQUFJLEVBQUU7SUFBQ04sSUFBSSxFQUFFTyxPQUFPO0lBQUVKLFFBQVEsRUFBRTtFQUFJO0FBQ3hDLENBQUMsQ0FBQztBQUFBWCxhQUFBLEdBQUFHLENBQUE7QUFFRmEsTUFBTSxDQUFDQyxPQUFPLEdBQUdmLFFBQVEsQ0FBQ2dCLEtBQUssQ0FBQyxNQUFNLEVBQUViLFVBQVUsQ0FBQyJ9