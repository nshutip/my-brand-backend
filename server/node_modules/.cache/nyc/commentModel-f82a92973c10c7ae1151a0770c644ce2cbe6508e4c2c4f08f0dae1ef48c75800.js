"use strict";

function cov_aqd75yuba() {
  var path = "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/commentModel.js";
  var hash = "1cec90c604dc2aefb498042431b5b23db1d14154";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/nshutip/Desktop/Andela/my-brand-backend/server/models/commentModel.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 36
        }
      },
      "1": {
        start: {
          line: 3,
          column: 22
        },
        end: {
          line: 7,
          column: 2
        }
      },
      "2": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 58
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1cec90c604dc2aefb498042431b5b23db1d14154"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_aqd75yuba = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_aqd75yuba();
var mongoose = (cov_aqd75yuba().s[0]++, require("mongoose"));
var commentSchema = (cov_aqd75yuba().s[1]++, new mongoose.Schema({
  articleId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'Article'
  },
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
    ref: 'User'
  },
  comment: {
    type: String,
    required: true
  }
}));
cov_aqd75yuba().s[2]++;
module.exports = mongoose.model("Comment", commentSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfYXFkNzV5dWJhIiwiYWN0dWFsQ292ZXJhZ2UiLCJtb25nb29zZSIsInMiLCJyZXF1aXJlIiwiY29tbWVudFNjaGVtYSIsIlNjaGVtYSIsImFydGljbGVJZCIsInR5cGUiLCJUeXBlcyIsIk9iamVjdElkIiwicmVxdWlyZWQiLCJyZWYiLCJ1c2VySWQiLCJjb21tZW50IiwiU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1vZGVsIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvbnNodXRpcC9EZXNrdG9wL0FuZGVsYS9teS1icmFuZC1iYWNrZW5kL3NlcnZlci9tb2RlbHMvIiwic291cmNlcyI6WyJjb21tZW50TW9kZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwibW9uZ29vc2VcIilcblxuY29uc3QgY29tbWVudFNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xuXHRhcnRpY2xlSWQ6IHsgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZXF1aXJlZDogdHJ1ZSwgcmVmOiAnQXJ0aWNsZScgfSxcblx0dXNlcklkOiB7IHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVxdWlyZWQ6IHRydWUsIHJlZjogJ1VzZXInIH0sXG5cdGNvbW1lbnQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbW9uZ29vc2UubW9kZWwoIFwiQ29tbWVudFwiLCBjb21tZW50U2NoZW1hKSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlWTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBZlosSUFBTUUsUUFBUSxJQUFBRixhQUFBLEdBQUFHLENBQUEsT0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUVwQyxJQUFNQyxhQUFhLElBQUFMLGFBQUEsR0FBQUcsQ0FBQSxPQUFHLElBQUlELFFBQVEsQ0FBQ0ksTUFBTSxDQUFDO0VBQ3pDQyxTQUFTLEVBQUU7SUFBRUMsSUFBSSxFQUFFTixRQUFRLENBQUNJLE1BQU0sQ0FBQ0csS0FBSyxDQUFDQyxRQUFRO0lBQUVDLFFBQVEsRUFBRSxJQUFJO0lBQUVDLEdBQUcsRUFBRTtFQUFVLENBQUM7RUFDbkZDLE1BQU0sRUFBRTtJQUFFTCxJQUFJLEVBQUVOLFFBQVEsQ0FBQ0ksTUFBTSxDQUFDRyxLQUFLLENBQUNDLFFBQVE7SUFBRUMsUUFBUSxFQUFFLElBQUk7SUFBRUMsR0FBRyxFQUFFO0VBQU8sQ0FBQztFQUM3RUUsT0FBTyxFQUFFO0lBQUVOLElBQUksRUFBRU8sTUFBTTtJQUFFSixRQUFRLEVBQUU7RUFBSztBQUN6QyxDQUFDLENBQUM7QUFBQ1gsYUFBQSxHQUFBRyxDQUFBO0FBRUhhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHZixRQUFRLENBQUNnQixLQUFLLENBQUUsU0FBUyxFQUFFYixhQUFhLENBQUMifQ==